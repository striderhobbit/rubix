$cubeSize: 210px;
$cubieSize: calc(#{$cubeSize} / 3);

@each $axis in x, y, z {
    @each $direction in -1, 1 {
        @keyframes rotate-#{$axis}#{if($direction==1, "", "-reverse")} {
            0% {
                transform: rotate(0);
            }
            100% {
                transform: rotate#{to-upper-case($axis) }(calc(#{$direction} * 90deg));
            }
        }
    }
}

:host {
    display: flex;
}

.cube {
    border: 1px solid black;
    height: $cubeSize;
    margin: $cubeSize;
    transform-style: preserve-3d;
    transform: rotate3d(var(--rotate-x), var(--rotate-y), var(--rotate-z), calc(var(--rotate-a) * 1rad));
    width: $cubeSize;

    --color-B: #0246ad;
    --color-D: #ffd500;
    --color-F: #009b48;
    --color-L: #ff5800;
    --color-R: #b71234;
    --color-U: white;
}

.cubicle {
    height: 100%;
    pointer-events: none;
    position: absolute;
    transform-style: preserve-3d;
    width: 100%;

    :host([data-move]) & {
        animation-duration: 1s;
        animation-timing-function: ease-in-out;
    }

    :host([data-move="B"]) &.B {
        animation-name: rotate-z-reverse;
    }

    :host([data-move="D"]) &.D {
        animation-name: rotate-y;
    }

    :host([data-move="E"]) &.E {
        animation-name: rotate-y;
    }

    :host([data-move="F"]) &.F {
        animation-name: rotate-z;
    }

    :host([data-move="L"]) &.L {
        animation-name: rotate-x-reverse;
    }

    :host([data-move="M"]) &.M {
        animation-name: rotate-x-reverse;
    }

    :host([data-move="R"]) &.R {
        animation-name: rotate-x;
    }

    :host([data-move="S"]) &.S {
        animation-name: rotate-z;
    }

    :host([data-move="U"]) &.U {
        animation-name: rotate-y-reverse;
    }
}

.cubie {
    height: $cubieSize;
    transform-style: preserve-3d;
    transform: translate3d(calc(var(--x) * $cubieSize), calc(var(--y) * $cubieSize), calc(var(--z) * $cubieSize));
    width: $cubieSize;
}

.cubie-face {
    align-items: center;
    background-color: var(--color);
    border-radius: 10px;
    display: flex;
    font-size: calc(#{$cubieSize} / 2);
    height: 100%;
    justify-content: center;
    position: absolute;
    width: 100%;

    &--B {
        transform: rotateY(180deg) translateZ(calc(#{$cubieSize} / 2));
    }

    &--D {
        transform: rotateX(270deg) translateZ(calc(#{$cubieSize} / 2));
    }

    &--F {
        transform: translateZ(calc(#{$cubieSize} / 2));
    }

    &--L {
        transform: rotateY(270deg) translateZ(calc(#{$cubieSize} / 2));
    }

    &--R {
        transform: rotateY(90deg) translateZ(calc(#{$cubieSize} / 2));
    }

    &--U {
        transform: rotateX(90deg) translateZ(calc(#{$cubieSize} / 2));
    }
}
