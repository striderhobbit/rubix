$cubeSize: 50vmin;
$cubieSize: calc($cubeSize / 3);

@each $axis in X, Y, Z {
    @keyframes rotate#{$axis} {
        0% {
            transform: rotate(0);
        }
        100% {
            transform: rotate#{$axis
                }(calc(var(--animation-direction-factor-1, 1) * var(--animation-direction-factor-2, 1) * 90deg));
        }
    }
}

:host {
    align-items: center;
    display: flex;
    height: 100%;
    justify-content: center;

    &[data-move-direction="reverse"] {
        --animation-direction-factor-1: -1;
    }
}

.cube {
    height: $cubeSize;
    margin: calc($cubeSize * (sqrt(3) - 1) / 2);
    transform-style: preserve-3d;
    transform: rotate3d(var(--rotate-x), var(--rotate-y), var(--rotate-z), calc(var(--rotate-a) * 1rad));
    width: $cubeSize;

    --color-back: #0246ad;
    --color-down: #ffd500;
    --color-front: #009b48;
    --color-left: #ff5800;
    --color-right: #b71234;
    --color-up: white;
}

.cubicle {
    height: 100%;
    pointer-events: none;
    position: absolute;
    transform-style: preserve-3d;
    width: 100%;

    :host([data-move-layer]) & {
        animation-duration: 1s;
        animation-timing-function: ease-in-out;
    }

    :host([data-move-layer="L"]) &__layer--L,
    :host([data-move-layer="M"]) &__layer--M,
    :host([data-move-layer="R"]) &__layer--R {
        animation-name: rotateX;
    }

    :host([data-move-layer="D"]) &__layer--D,
    :host([data-move-layer="E"]) &__layer--E,
    :host([data-move-layer="U"]) &__layer--U {
        animation-name: rotateY;
    }

    :host([data-move-layer="B"]) &__layer--B,
    :host([data-move-layer="F"]) &__layer--F,
    :host([data-move-layer="S"]) &__layer--S {
        animation-name: rotateZ;
    }

    :host([data-move-layer="B"]) &__layer--B,
    :host([data-move-layer="L"]) &__layer--L,
    :host([data-move-layer="M"]) &__layer--M,
    :host([data-move-layer="U"]) &__layer--U {
        --animation-direction-factor-2: -1;
    }
}

.cubie {
    height: $cubieSize;
    transform-style: preserve-3d;
    transform: translate3d(calc(var(--x) * $cubieSize), calc(var(--y) * $cubieSize), calc((var(--z) - 1) * $cubieSize));
    width: $cubieSize;
}

.cubie__face {
    background-color: black;
    border-radius: calc($cubieSize / 10);
    position: absolute;

    &--back {
        transform: rotateY(180deg) translateZ(calc($cubieSize / 2));
    }

    &--down {
        transform: rotateX(-90deg) translateZ(calc($cubieSize / 2));
    }

    &--front {
        transform: translateZ(calc($cubieSize / 2));
    }

    &--left {
        transform: rotateY(-90deg) translateZ(calc($cubieSize / 2));
    }

    &--right {
        transform: rotateY(90deg) translateZ(calc($cubieSize / 2));
    }

    &--up {
        transform: rotateX(90deg) translateZ(calc($cubieSize / 2));
    }
}
