$cubeSize: 50vmin;
$cubieSize: calc($cubeSize / 3);

@each $axis in X, Y, Z {
    @keyframes rotate#{$axis} {
        0% {
            transform: rotate(0);
        }
        100% {
            transform: rotate#{$axis }(calc(var(--twist-order) * 90deg));
        }
    }
}

:host {
    align-items: center;
    display: flex;
    height: 100%;
    justify-content: center;
}

.cube {
    height: $cubeSize;
    margin: calc($cubeSize * (sqrt(3) - 1) / 2);
    transform-style: preserve-3d;
    transform: rotate3d(var(--rotate-x), var(--rotate-y), var(--rotate-z), calc(var(--rotate-a) * 1rad));
    width: $cubeSize;

    --color-0: #0246ad;
    --color-1: #ffd500;
    --color-2: #009b48;
    --color-3: #ff5800;
    --color-4: #b71234;
    --color-5: #ffffff;
    --color-6: #000000;
}

.cubicle {
    height: 100%;
    pointer-events: none;
    position: absolute;
    transform-style: preserve-3d;
    width: 100%;

    :host([rotation-axis]) & {
        animation-duration: 1s;
        animation-timing-function: ease-in-out;
    }

    :host([rotation-axis="x"]) & {
        animation-name: rotateX;
    }

    :host([rotation-axis="y"]) & {
        animation-name: rotateY;
    }

    :host([rotation-axis="z"]) & {
        animation-name: rotateZ;
    }
}

.cubie {
    height: $cubieSize;
    transform-style: preserve-3d;
    transform: translate3d(calc(var(--tx) * $cubieSize), calc(var(--ty) * $cubieSize), calc((var(--tz)) * $cubieSize))
        translateZ(-$cubieSize);
    width: $cubieSize;
}

.cubie__face {
    backface-visibility: hidden;
    background-color: black;
    border-radius: calc($cubieSize / 10);
    position: absolute;

    &--0 {
        transform: rotateY(180deg) translateZ(calc($cubieSize / 2));
    }

    &--1 {
        transform: rotateX(-90deg) translateZ(calc($cubieSize / 2));
    }

    &--2 {
        transform: translateZ(calc($cubieSize / 2));
    }

    &--3 {
        transform: rotateY(-90deg) translateZ(calc($cubieSize / 2));
    }

    &--4 {
        transform: rotateY(90deg) translateZ(calc($cubieSize / 2));
    }

    &--5 {
        transform: rotateX(90deg) translateZ(calc($cubieSize / 2));
    }
}
